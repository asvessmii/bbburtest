#!/usr/bin/env python3
"""
BBBurgers Telegram Bot
–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
"""

import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import uuid
from pathlib import Path

from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
MONGO_URL = os.getenv('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.getenv('DB_NAME', 'bbburgers')

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not ADMIN_ID:
    raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
client = AsyncIOMotorClient(MONGO_URL)
db = client[DB_NAME]

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    telegram_id: int
    username: Optional[str] = None
    name: Optional[str] = None
    birthday: Optional[str] = None
    favorite_burger: Optional[str] = None
    referral_code: Optional[str] = None
    referred_by: Optional[str] = None
    rank: str = "guest"
    story_mentions: int = 0
    visits: int = 0
    referrals: int = 0
    bonuses: int = 0
    registration_date: datetime = Field(default_factory=datetime.utcnow)
    last_activity: datetime = Field(default_factory=datetime.utcnow)
    is_registered: bool = False

# –°–æ–æ–±—â–µ–Ω–∏—è
MESSAGES = {
    "welcome": """–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± BB–†–µ–∑–∏–¥–µ–Ω—Ç–æ–≤.
–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ —Ç–µ—Ö, –∫—Ç–æ –∑–Ω–∞–µ—Ç —Ç–æ–ª–∫ –≤ –±—É—Ä–≥–µ—Ä–∞—Ö üòé

–°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ üçî""",
    
    "already_registered": """üçî –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ BB–†–µ–∑–∏–¥–µ–Ω—Ç–æ–≤!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)""",
    
    "enter_name": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
    "enter_birthday": "–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1995):",
    "choose_burger": "–í—ã–±–µ—Ä–∏ –ª—é–±–∏–º—ã–π –±—É—Ä–≥–µ—Ä:",
    "enter_referral": "–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç –¥—Ä—É–≥–∞? (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–Ω–µ—Ç')",
    
    "registration_complete": """‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± BB–†–µ–∑–∏–¥–µ–Ω—Ç–æ–≤!

–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: ü•§ –õ–∏–º–æ–Ω–∞–¥ –≤ –ø–æ–¥–∞—Ä–æ–∫!
–ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞—Å—Å–µ.

–í–∏–∂—É, —Ç—ã —Å –Ω–∞–º–∏. –ó–Ω–∞—á–∏—Ç, —Ç—ã —É–º–µ–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å üòé""",
    
    "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BB–†–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:",
    "admin_menu": "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
    
    "not_registered": "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å /start",
    "admin_only": "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
}

# –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É—Ä–≥–µ—Ä–æ–≤
BURGER_OPTIONS = [
    "BBClassic", "BBCheeseburger", "BBBacon", "BBChicken", 
    "BBVeggie", "BBSpecial", "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
]

# –†–∞–Ω–≥–∏
RANKS = {
    "guest": "üßë –ì–æ—Å—Ç—å",
    "resident": "üë§ BB–†–µ–∑–∏–¥–µ–Ω—Ç", 
    "super_resident": "ü¶∏ –°—É–ø–µ—Ä–†–µ–∑–∏–¥–µ–Ω—Ç",
    "ambassador": "üëë –ê–º–±–∞—Å—Å–∞–¥–æ—Ä"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, Dict[str, Any]] = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_user(telegram_id: int) -> Optional[User]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_data = await db.users.find_one({"telegram_id": telegram_id})
        if user_data:
            return User(**user_data)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None

async def save_user(user: User):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await db.users.replace_one(
            {"telegram_id": user.telegram_id}, 
            user.dict(), 
            upsert=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_user_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        [KeyboardButton("üéÅ –û—Ñ—Ñ–µ—Ä –º–µ—Å—è—Ü–∞"), KeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton("üçî –¢–∞–π–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton("üí¨ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")],
        [KeyboardButton("üì∏ –û—Ç–º–µ—Ç–∏—Ç—å –≤ —Å—Ç–æ—Ä–∏—Å"), KeyboardButton("üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

def get_burger_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É—Ä–≥–µ—Ä–∞"""
    keyboard = []
    for i in range(0, len(BURGER_OPTIONS), 2):
        row = [InlineKeyboardButton(BURGER_OPTIONS[i], callback_data=f"burger_{i}")]
        if i + 1 < len(BURGER_OPTIONS):
            row.append(InlineKeyboardButton(BURGER_OPTIONS[i + 1], callback_data=f"burger_{i + 1}"))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = update.effective_user.id
    username = update.effective_user.username
    
    user = await get_user(telegram_id)
    
    if user and user.is_registered:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if telegram_id == ADMIN_ID:
            await update.message.reply_text(
                MESSAGES["already_registered"], 
                reply_markup=get_admin_keyboard()
            )
        else:
            await update.message.reply_text(
                MESSAGES["already_registered"], 
                reply_markup=get_user_keyboard()
            )
        return

    # –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not user:
        user = User(telegram_id=telegram_id, username=username)
        await save_user(user)
    
    await update.message.reply_text(MESSAGES["welcome"])
    await update.message.reply_text(MESSAGES["enter_name"])
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_states[telegram_id] = {"step": "name", "data": {}}

async def admin_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    telegram_id = update.effective_user.id
    
    if telegram_id != ADMIN_ID:
        await update.message.reply_text(MESSAGES["admin_only"])
        return
    
    user = await get_user(telegram_id)
    if not user or not user.is_registered:
        await update.message.reply_text(MESSAGES["not_registered"])
        return
    
    await update.message.reply_text(
        MESSAGES["admin_menu"], 
        reply_markup=get_admin_keyboard()
    )
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if telegram_id in user_states:
        await handle_registration_step(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(telegram_id)
    if not user or not user.is_registered:
        await update.message.reply_text(MESSAGES["not_registered"])
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    await handle_menu_buttons(update, context, text)

async def handle_registration_step(update: Update, context, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    telegram_id = update.effective_user.id
    state = user_states[telegram_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if state["step"] == "broadcast" and telegram_id == ADMIN_ID:
        users = await db.users.find({"is_registered": True}).to_list(1000)
        success_count = 0
        
        for user_data in users:
            try:
                await context.bot.send_message(
                    chat_id=user_data["telegram_id"], 
                    text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç BB&Burgers:\n\n{text}"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['telegram_id']}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )
        del user_states[telegram_id]
        return
    
    # –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if state["step"] == "name":
        state["data"]["name"] = text
        state["step"] = "birthday"
        await update.message.reply_text(MESSAGES["enter_birthday"])
        
    elif state["step"] == "birthday":
        state["data"]["birthday"] = text
        state["step"] = "burger"
        await update.message.reply_text(
            MESSAGES["choose_burger"], 
            reply_markup=get_burger_keyboard()
        )
        
    elif state["step"] == "referral":
        if text.lower() != "–Ω–µ—Ç":
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            referring_user = await db.users.find_one({"referral_code": text})
            if referring_user:
                state["data"]["referred_by"] = text
                # –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                await db.users.update_one(
                    {"referral_code": text},
                    {"$inc": {"referrals": 1}}
                )
        
        # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await complete_registration(update, context)

async def complete_registration(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = update.effective_user.id
    state = user_states[telegram_id]
    
    user = await get_user(telegram_id)
    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
        return
    
    # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.name = state["data"]["name"]
    user.birthday = state["data"]["birthday"]
    user.favorite_burger = state["data"]["favorite_burger"]
    user.referred_by = state["data"].get("referred_by")
    user.is_registered = True
    user.rank = "resident"
    user.referral_code = f"BB{telegram_id}"
    
    await save_user(user)
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_states[telegram_id]
    
    await update.message.reply_text(
        MESSAGES["registration_complete"],
        reply_markup=get_user_keyboard()
    )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if telegram_id == ADMIN_ID:
        await update.message.reply_text(
            MESSAGES["admin_menu"], 
            reply_markup=get_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            MESSAGES["main_menu"], 
            reply_markup=get_user_keyboard()
        )

async def handle_menu_buttons(update: Update, context, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    telegram_id = update.effective_user.id
    user = await get_user(telegram_id)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if text == "üéÅ –û—Ñ—Ñ–µ—Ä –º–µ—Å—è—Ü–∞":
        offer_text = "üéÅ –¢–≤–æ–π –æ—Ñ—Ñ–µ—Ä –º–µ—Å—è—Ü–∞:\n\nüçü –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!\n–ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞—Å—Å–µ."
        await update.message.reply_text(offer_text)
        
    elif text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å":
        status_text = f"""üìä –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ –∫–ª—É–±–µ:

{RANKS[user.rank]} | –†–∞–Ω–≥: {user.rank.title()}

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –û—Ç–º–µ—Ç–∫–∏ –≤ —Å—Ç–æ—Ä–∏—Å: {user.story_mentions}
‚Ä¢ –í–∏–∑–∏—Ç—ã: {user.visits}  
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è: {user.referrals}
‚Ä¢ –ë–æ–Ω—É—Å—ã: {user.bonuses}"""
        await update.message.reply_text(status_text)
        
    elif text == "üçî –¢–∞–π–Ω–æ–µ –º–µ–Ω—é":
        if user.rank in ["super_resident", "ambassador"]:
            secret_text = """üçî –¢–∞–π–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ!

üî• BB Secret Burger - 590‚ÇΩ
üå∂Ô∏è BB Spicy Special - 650‚ÇΩ
ü•© BB Premium Beef - 790‚ÇΩ

–≠—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –°—É–ø–µ—Ä–†–µ–∑–∏–¥–µ–Ω—Ç–∞–º –∏ –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º!"""
            await update.message.reply_text(secret_text)
        else:
            await update.message.reply_text("–¢–∞–π–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –°—É–ø–µ—Ä–†–µ–∑–∏–¥–µ–Ω—Ç–∞–º –∏ –≤—ã—à–µ! –ù–∞–±–µ—Ä–∏ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üòé")
            
    elif text == "üí¨ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞":
        invite_text = f"""üí¨ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –≤ –∫–ª—É–±!

–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{user.referral_code}</code>

üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {user.referrals}
üéØ –î–æ –∑–≤–∞–Ω–∏—è –ê–º–±–∞—Å—Å–∞–¥–æ—Ä: {max(0, 3 - user.referrals)} –¥—Ä—É–∑–µ–π

–ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ–π –∫–æ–¥ - –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã!"""
        await update.message.reply_text(invite_text, parse_mode=ParseMode.HTML)
        
    elif text == "üì∏ –û—Ç–º–µ—Ç–∏—Ç—å –≤ —Å—Ç–æ—Ä–∏—Å":
        stories_text = """üì∏ –ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å –≤ —Å—Ç–æ—Ä–∏—Å:

1. –°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å –Ω–∞—à–∏–º–∏ –±—É—Ä–≥–µ—Ä–∞–º–∏
2. –û—Ç–º–µ—Ç—å @bbburgers –≤ —Å–≤–æ–∏—Ö –∏—Å—Ç–æ—Ä–∏—è—Ö
3. –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É
4. –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!

–ü–æ—Å–ª–µ 3 –æ—Ç–º–µ—Ç–æ–∫ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –°—É–ø–µ—Ä–†–µ–∑–∏–¥–µ–Ω—Ç–æ–º!"""
        await update.message.reply_text(stories_text)
        
    elif text == "üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è":
        birthday_text = f"""üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birthday or '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è –∂–¥—ë—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫! üéÅ

–ó–∞ 3 –¥–Ω—è –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –º—ã –ø—Ä–∏—à–ª—ë–º —Ç–µ–±–µ —Å—é—Ä–ø—Ä–∏–∑."""
        await update.message.reply_text(birthday_text)
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    elif telegram_id == ADMIN_ID:
        if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            total_users = await db.users.count_documents({"is_registered": True})
            residents = await db.users.count_documents({"rank": "resident"})
            super_residents = await db.users.count_documents({"rank": "super_resident"})
            ambassadors = await db.users.count_documents({"rank": "ambassador"})
            
            stats_text = f"""üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}

–ü–æ —Ä–∞–Ω–≥–∞–º:
‚Ä¢ BB–†–µ–∑–∏–¥–µ–Ω—Ç—ã: {residents}
‚Ä¢ –°—É–ø–µ—Ä–†–µ–∑–∏–¥–µ–Ω—Ç—ã: {super_residents}  
‚Ä¢ –ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã: {ambassadors}"""
            await update.message.reply_text(stats_text)
            
        elif text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
            broadcast_text = """üì¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ: /cancel"""
            await update.message.reply_text(broadcast_text)
            user_states[telegram_id] = {"step": "broadcast", "data": {}}
            
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            total_users = await db.users.count_documents({})
            registered_users = await db.users.count_documents({"is_registered": True})
            today_active = await db.users.count_documents({
                "last_activity": {"$gte": datetime.utcnow() - timedelta(days=1)}
            })
            
            stats_text = f"""üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {registered_users}
üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {today_active}"""
            await update.message.reply_text(stats_text)
            
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            settings_text = """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
            await update.message.reply_text(settings_text)
            
        elif text == "üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é":
            await update.message.reply_text(
                MESSAGES["main_menu"],
                reply_markup=get_user_keyboard()
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
async def handle_callback_query(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    callback_data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É—Ä–≥–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if callback_data.startswith("burger_"):
        if telegram_id in user_states and user_states[telegram_id]["step"] == "burger":
            burger_index = int(callback_data.split("_")[1])
            user_states[telegram_id]["data"]["favorite_burger"] = BURGER_OPTIONS[burger_index]
            user_states[telegram_id]["step"] = "referral"
            
            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω: {BURGER_OPTIONS[burger_index]}\n\n{MESSAGES['enter_referral']}"
            )

async def cancel_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    telegram_id = update.effective_user.id
    
    if telegram_id in user_states:
        action = user_states[telegram_id].get("step", "–¥–µ–π—Å—Ç–≤–∏–µ")
        del user_states[telegram_id]
        
        if action == "broadcast":
            await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

async def menu_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    telegram_id = update.effective_user.id
    user = await get_user(telegram_id)
    
    if not user or not user.is_registered:
        await update.message.reply_text(MESSAGES["not_registered"])
        return
    
    if telegram_id == ADMIN_ID:
        await update.message.reply_text(
            MESSAGES["admin_menu"], 
            reply_markup=get_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            MESSAGES["main_menu"], 
            reply_markup=get_user_keyboard()
        )

async def menu_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    telegram_id = update.effective_user.id
    user = await get_user(telegram_id)
    
    if not user or not user.is_registered:
        await update.message.reply_text(MESSAGES["not_registered"])
        return
    
    if telegram_id == ADMIN_ID:
        await update.message.reply_text(
            MESSAGES["admin_menu"], 
            reply_markup=get_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            MESSAGES["main_menu"], 
            reply_markup=get_user_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ BBBurgers –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()



async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if telegram_id in user_states:
        await handle_registration_step(update, context, text)
        return

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(telegram_id)
    if not user or not user.is_registered:
        await update.message.reply_text(MESSAGES["not_registered"])
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    await handle_menu_buttons(update, context, text)


