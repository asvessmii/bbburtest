#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BBBurgers –±–æ—Ç–∞
"""

import os
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

async def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BBBurgers –±–æ—Ç–∞...\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    admin_id = os.getenv('ADMIN_ID')
    mongo_url = os.getenv('MONGO_URL', 'mongodb://localhost:27017')
    db_name = os.getenv('DB_NAME', 'bbburgers')
    
    if telegram_token:
        print(f"   ‚úÖ TELEGRAM_TOKEN: {'*' * 20}{telegram_token[-10:]}")
    else:
        print("   ‚ùå TELEGRAM_TOKEN: –ù–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    if admin_id:
        print(f"   ‚úÖ ADMIN_ID: {admin_id}")
    else:
        print("   ‚ùå ADMIN_ID: –ù–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"   ‚úÖ MONGO_URL: {mongo_url}")
    print(f"   ‚úÖ DB_NAME: {db_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:")
    
    try:
        client = AsyncIOMotorClient(mongo_url)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await client.admin.command('ping')
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = client[db_name]
        collections = await db.list_collection_names()
        print(f"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"   üìä –ö–æ–ª–ª–µ–∫—Ü–∏–∏: {collections if collections else '–ü—É—Å—Ç–æ (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'users' in collections:
            user_count = await db.users.count_documents({})
            registered_count = await db.users.count_documents({"is_registered": True})
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count} (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {registered_count})")
        
        client.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:")
    
    required_files = ['bot.py', 'requirements.txt', '.env']
    for file_name in required_files:
        file_path = ROOT_DIR / file_name
        if file_path.exists():
            print(f"   ‚úÖ {file_name}: –ù–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå {file_name}: –ù–µ –Ω–∞–π–¥–µ–Ω!")
            if file_name == '.env':
                print("      üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python3 bot.py")
    return True

if __name__ == "__main__":
    asyncio.run(test_configuration())

